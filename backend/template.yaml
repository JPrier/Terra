AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Terra Digital Marketplace Backend - Serverless API

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  DynamoDBTablePrefix:
    Type: String
    Default: terra
    Description: Prefix for DynamoDB table names
  
  JWTSecret:
    Type: String
    NoEcho: true
    Description: JWT secret for token signing
  
  CorsOrigins:
    Type: String
    Default: "https://jprier.github.io,http://localhost:3000"
    Description: Comma-separated list of allowed CORS origins

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: provided.al2
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        DYNAMODB_TABLE_PREFIX: !Ref DynamoDBTablePrefix
        JWT_SECRET: !Ref JWTSecret
        CORS_ORIGINS: !Ref CorsOrigins
        AWS_REGION: !Ref AWS::Region
        RUST_LOG: info
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: !Sub "'${CorsOrigins}'"

Resources:
  # API Gateway
  TerraApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Description: Terra Marketplace API
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: !Sub "'${CorsOrigins}'"

  # Lambda Functions
  ProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub terra-products-${Environment}
      CodeUri: target/lambda/products/
      Handler: bootstrap
      Description: Handle product-related operations
      Events:
        GetProducts:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /products
            Method: GET
        GetProduct:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /products/{id}
            Method: GET
        CreateProduct:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /products
            Method: POST
        UpdateProduct:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /products/{id}
            Method: PUT
        DeleteProduct:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /products/{id}
            Method: DELETE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable

  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub terra-users-${Environment}
      CodeUri: target/lambda/users/
      Handler: bootstrap
      Description: Handle user-related operations
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /users
            Method: GET
        GetUser:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /users/{id}
            Method: GET
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /users/{id}
            Method: PUT
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /users/{id}
            Method: DELETE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub terra-auth-${Environment}
      CodeUri: target/lambda/auth/
      Handler: bootstrap
      Description: Handle authentication operations
      Events:
        Register:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /auth/register
            Method: POST
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /auth/login
            Method: POST
        RefreshToken:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /auth/refresh
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable

  OrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub terra-orders-${Environment}
      CodeUri: target/lambda/orders/
      Handler: bootstrap
      Description: Handle order-related operations
      Events:
        GetOrders:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /orders
            Method: GET
        GetOrder:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /orders/{id}
            Method: GET
        CreateOrder:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /orders
            Method: POST
        UpdateOrder:
          Type: Api
          Properties:
            RestApiId: !Ref TerraApi
            Path: /orders/{id}
            Method: PUT
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable

  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${DynamoDBTablePrefix}_users_${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: username-index
          KeySchema:
            - AttributeName: username
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${DynamoDBTablePrefix}_products_${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: seller_id
          AttributeType: S
        - AttributeName: category
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: seller-index
          KeySchema:
            - AttributeName: seller_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: category-index
          KeySchema:
            - AttributeName: category
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${DynamoDBTablePrefix}_orders_${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # S3 Bucket for file storage
  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub terra-marketplace-assets-${Environment}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: !Split [',', !Ref CorsOrigins]
            MaxAge: 3600

  # CloudFront Distribution for assets
  AssetsDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt AssetsBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        PriceClass: PriceClass_100

Outputs:
  ApiUrl:
    Description: "Terra Marketplace API Gateway endpoint URL"
    Value: !Sub "https://${TerraApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
  
  AssetsDistributionUrl:
    Description: "CloudFront distribution URL for assets"
    Value: !GetAtt AssetsDistribution.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-AssetsUrl"
  
  AssetsBucketName:
    Description: "S3 bucket name for assets"
    Value: !Ref AssetsBucket
    Export:
      Name: !Sub "${AWS::StackName}-AssetsBucket"