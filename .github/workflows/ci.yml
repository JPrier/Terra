---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy on core crates
        run: cargo clippy --all-targets --all-features -- -D warnings
        working-directory: backend/crates

      - name: Run tests
        run: cargo test --verbose --all
        working-directory: backend/crates

      - name: Build core libraries
        run: |
          cargo build --manifest-path backend/crates/domain/Cargo.toml
          cargo build --manifest-path backend/crates/application/Cargo.toml
          cargo build --manifest-path backend/crates/infrastructure/Cargo.toml
          cargo build --manifest-path backend/crates/presentation/Cargo.toml

      - name: Check lambda compilation (lightweight check)
        run: |
          cargo check --manifest-path backend/lambdas/api_rfqs/Cargo.toml
          cargo check --manifest-path backend/lambdas/api_uploads/Cargo.toml
          cargo check --manifest-path backend/lambdas/api_manufacturers/Cargo.toml
          cargo check --manifest-path backend/lambdas/image_ingest/Cargo.toml
          cargo check --manifest-path backend/lambdas/publisher/Cargo.toml

  frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build